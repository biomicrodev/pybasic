#!/usr/bin/env python3

import argparse
from dataclasses import dataclass
from pathlib import Path
from typing import Optional

import dask
import numpy.typing as npt
from dask.delayed import Delayed
from skimage import img_as_float
from skimage.util.dtype import _convert
from tifffile import tifffile, TiffReader, TiffWriter

from pybasic.utils import timed_ctx, _flatten_paths, _query_yes_no


def _check_args(
    flat_path: Optional[Path], dark_path: Optional[Path], out_path: Optional[Path]
):
    if flat_path is None:
        raise ValueError(f"Need to pass path to flatfield image!")
    if not flat_path.exists():
        raise ValueError(f"'{flat_path}' does not exist!")

    if not dark_path.exists():
        raise ValueError(f"'{dark_path}' does not exist!")

    if out_path.exists() and any(out_path.iterdir()):
        proceed = _query_yes_no(f"'{out_path}' is not empty; proceed anyway?")
        if proceed:
            return
        else:
            raise RuntimeError(f"Not overwriting; quitting")


@dataclass
class Image:
    array: npt.NDArray
    ome: str
    src: Path


def read_with_metadata(path: Path) -> Image:
    with TiffReader(path) as reader:
        array = reader.asarray()
        image = Image(array=array, ome=reader.ome_metadata, src=path)
    return image


def correct(
    image: Image, flatfield: npt.NDArray, darkfield: Optional[npt.NDArray]
) -> Image:
    array = image.array
    dtype = array.dtype
    array = img_as_float(array)

    if darkfield is None:
        array /= flatfield
    else:
        array = (array - darkfield) / flatfield

    array = _convert(array, dtype=dtype)
    image.array = array
    return image


def write_with_metadata(image: Image, out_path: Path):
    dst = out_path / image.src.name
    with TiffWriter(dst, ome=image.ome) as writer:
        writer.write(image.array, compression="zlib")


def run():
    filename = Path(__file__).name

    parser = argparse.ArgumentParser(
        description=f"{filename} - Correct background and shading in microscopy images"
    )
    parser.add_argument(
        "--flatfield",
        metavar="PATH",
        type=str,
        help="path to flatfield image",
        required=True,
    )
    parser.add_argument(
        "--darkfield",
        metavar="PATH",
        type=str,
        help="path to darkfield image",
    )
    # parser.add_argument(
    #     "--timelapse",
    #     action="store_true",
    #     help="interpret images as timelapse",
    # )
    parser.add_argument(
        "images",
        type=str,
        nargs="+",
        help="paths to images and/or folders containing images",
    )
    parser.add_argument(
        "--out",
        metavar="PATH",
        type=str,
        default=".",
        help="output folder; current folder if not specified",
    )

    args = parser.parse_args()

    # validate arguments
    flat_path = Path(args.flatfield) if args.flatfield is not None else None
    dark_path = Path(args.darkfield) if args.darkfield is not None else None
    out_path = Path(args.out)

    try:
        _check_args(flat_path, dark_path, out_path)
    except Exception as e:
        print(e)
        return

    # normalize paths
    paths = [Path(p) for p in args.images]
    paths = list(set(paths))  # make unique
    paths = list(_flatten_paths(paths, depth=1))

    # prepare to transform images
    out_path.mkdir(exist_ok=True, parents=True)
    srcs_dsts = [(p, out_path / p.name) for p in paths]

    # read correction images
    flatfield = tifffile.imread(flat_path)
    darkfield = tifffile.imread(dark_path) if dark_path is not None else None

    # set up dask graph
    delayeds = []
    for src, dst in srcs_dsts:
        im = dask.delayed(read_with_metadata)(src)
        im = dask.delayed(correct)(im, flatfield, darkfield)
        delayed: Delayed = dask.delayed(write_with_metadata)(im, out_path)
        delayeds.append(delayed)

    # and go!
    with timed_ctx("Corrected", print):
        dask.compute(*delayeds)


if __name__ == "__main__":
    run()
